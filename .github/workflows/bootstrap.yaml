name: Bootstrap Infrastructure
on: 
  workflow_dispatch:
    inputs:
      app_name:
        type: choice
        options:
          - app1
          - app2
      # environment:
      #   type: choice
      #   options:
      #     - 'non-prod'
      #     - 'prod'
        description: 'Target Environment'
      terraform_options:
        type: choice
        options:
          - n/a
          - validate
          - plan
          - apply
          - destroy
jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Display Inputs
        run: |
          echo "Selected Environment is: ${{ github.event.inputs.environment}}"
          echo "Selected Command is: ${{ github.event.inputs.terraform_options}}"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Authenticate to Google Cloud SDK
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: "${{ secrets.GCP_TF_SVC_ACCOUNT }}"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Execute Terraform Command
        run: |
          cd bootstrap-iac
          terraform init
          case "${{ github.event.inputs.terraform_options }}" in
            validate)
              terraform validate
              ;;
            plan)
              terraform plan
              ;;
            apply)
              terraform apply -auto-approve
              ;;
            destroy)
              terraform destroy -auto-approve
              ;;
            *)
              echo "Invalid terraform option selected."
              exit 1
              ;;
          esac
      - name: PWD
        run: pwd && ls
      - name: Terraform Output
        if: ${{ github.event.inputs.terraform_options == 'apply' || github.event.inputs.terraform_options == 'plan' }}
        run: terraform output
      # - name: Terraform ${{ github.event.inputs.terraform_options }} for ${{ github.event.inputs.environment }}
      #   if: ${{ github.event.inputs.terraform_options == 'init' || github.event.inputs.terraform_options == 'plan' || github.event.inputs.terraform_options == 'apply' || github.event.inputs.terraform_options == 'destroy' }}
      #   run: terraform init 
      # - name: Terraform ${{ github.event.inputs.terraform_options }} for ${{ github.event.inputs.environment }}
      #   if: ${{ github.event.inputs.terraform_options == 'validate' }}
      #   run: terraform validate
      # - name: Terraform Plan
      #   if: ${{ github.event.inputs.terraform_options == 'plan' }}
      #   run: terraform plan
      # - name: Terraform Apply
      #   if: ${{ github.event.inputs.terraform_options == 'apply' }}
      #   run: terraform apply -auto-approve
      # - name: Terraform Destroy
      #   if: ${{ github.event.inputs.terraform_options == 'destroy' }}
      #   run: terraform destroy -auto-approve
      # - name: List of files
      #   run: ls -la
